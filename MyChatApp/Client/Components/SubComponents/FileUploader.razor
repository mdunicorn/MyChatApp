@namespace WSDT.EmojiFilePicker.Sub
@using BlazorInputFile
@using System
@using System.IO;
@using System.Net.Http

@inject HttpClient Http

<style>
    .@dropTargetClass {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
        position: relative;
    }
    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }
    input.clickable {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        margin-top: -20px;
        margin-left: -20px;
        cursor: pointer;
    }
</style>

<div class="@IpDropClass">
    <InputFile class="clickable"
               multiple
               @ondragenter=OnIpDragEnter
               @ondragleave=OnIpDragLeave
               OnChange="HandleFileSelection" />

    Drop Files here or click me.

    @foreach (var fileInfo in FileList)
    {
        <br />@fileInfo.Name
    }
</div>


@code {
    [Parameter] public string FileUploadRoute { get; set; }
    [Parameter] public Action<List<string>> AddFiles { get; set; }

    const string dropTargetDragClass = "droptarget-drag";
    const string dropTargetClass = "droptarget";

    private List<string> _ipdropClasses = new List<string>() { dropTargetClass };

    string IpDropClass => string.Join(" ", _ipdropClasses);

    IList<IFileListEntry> FileList { get; set; }

    public void OnIpDragEnter(EventArgs e)
    {
        _ipdropClasses.Add(dropTargetDragClass);
    }

    public void OnIpDragLeave(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
    }

    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        FileList = files;
        _ipdropClasses.Remove(dropTargetDragClass);
        await ReadFiles(files);
    }


    public async Task ReadFiles(IEnumerable<IFileListEntry> files)
    {
        this.StateHasChanged();
        var nl = Environment.NewLine;
        var imgUriList = new List<string>();

        foreach (var file in files)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            imgUriList.Add(await UploadFile(ms.ToArray()));

            this.StateHasChanged();
        }

        this.AddFiles(imgUriList);
    }

    private async Task<string> UploadFile(byte[] img)
    {
        Console.WriteLine("Post to: " + FileUploadRoute);

        var resp = await Http.PostAsync(FileUploadRoute, new ByteArrayContent(img));
        var fileName = await resp.Content.ReadAsStringAsync();
        return fileName;
    }
}

@using MyChatApp.Shared
@using MyChatApp.Client.Services
@using MyChatApp.Client.Components.Messaging
@using Markdig 

@page "/"
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject IUserIdentificationService UserIdentificationService

@if (!initialized)
{
    <p>Initializing...</p>
}
else
{

    @if (chatting)
    {
        <div id="scrollbox">

            @foreach (var item in _allMessages)
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@((MarkupString)Markdown.ToHtml(item.Body))</div>
                </div>
            }
            <hr />
            <MessageEditor @bind-Text="newMessage" PlaceholderText="Enter message to send, then press the Send button (Markdown is supported)." OnSend="SendAsync" />

        </div>

    }
    else
    {

        <h1>Hi!</h1>
        <h2>I am Mohammad Dehghan</h2>
        <p>What's your name?</p>
        <p>Register or login using the links on top of the page, or enter user name below to continue as a guest.</p>

        <input type="text" @ref="UserNameInput" maxlength="32" @bind-value="@userName" @bind-value:event="oninput" @onkeydown="userName_KeyDown" />
        <button type="button" @onclick="@LoginAsGuest"><span class="oi oi-chat" aria-hidden="true"></span> Start Chatting!</button>

        @if (message != null)
        {
            <div class="invalid-feedback">@message</div>
            <small class="form-text text-muted">@message</small>
        }
    }
}


@code{
    bool chatting = false;
    string userName = null;
    ChatClient client = null;
    bool initialized = false;

    // on-screen message
    string message = null;

    // new message input
    string newMessage = null;

    // list of messages in chat
    List<Message> _allMessages = new List<Message>();

    ElementReference UserNameInput;

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        UserIdentificationService.AuthenticationStateChanged += async () =>
        {
            if (string.IsNullOrEmpty(await UserIdentificationService.GetGuestUserNameAsync()))
            {
                await DisconnectAsync();
            }

            StateHasChanged();
        };

        try
        {
            var authenticationState = await authenticationStateTask;
            if (authenticationState.User?.Identity.IsAuthenticated ?? false)
            {
                userName = authenticationState.User.Identity.Name;
                await StartChat();
            }
            else if (await UserIdentificationService.IsGuestUserAsync())
            {
                userName = await UserIdentificationService.GetGuestUserNameAsync();
                await StartChat();
            }

            await base.OnInitializedAsync();
        }
        finally
        {
            initialized = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && initialized)
            await JSRuntime.InvokeVoidAsync("focusElement", UserNameInput);
        await base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// Start chat client
    /// </summary>
    async Task LoginAsGuest()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(userName))
        {
            message = "Please enter a name";
            return;
        };

        await UserIdentificationService.SetGuestUserNameAsync(userName);
        await StartChat();
    }

    public async Task StartChat()
    {
        try
        {
            // remove old messages if any
            _allMessages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;
            client = new ChatClient(userName, baseUrl);
            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;
            // start the client
            Console.WriteLine("Index: chart starting...");
            await client.StartAsync();
            Console.WriteLine("Index: chart started?");

            chatting = true;
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    /// <summary>
    /// Inbound message
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="messageModel"></param>
    void MessageReceived(object sender, MyChatApp.Shared.Models.ChatMessageModel messageModel)
    {
        Console.WriteLine($"Blazor: receive {messageModel.UserName}: {messageModel.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(messageModel.UserName))
        {
            isMine = string.Equals(messageModel.UserName, userName, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new Message(messageModel.UserName, messageModel.Message, messageModel.DateTime, isMine);
        _allMessages.Add(newMsg);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        if (chatting)
        {
            await client.StopAsync();
            client = null;
            message = "chat ended";
            chatting = false;
        }
    }

    void OnSendClicked()
    {
        _ = SendAsync();
    }

    async Task SendAsync()
    {
        if (chatting && !string.IsNullOrWhiteSpace(newMessage))
        {
            // send message to hub
            await client.SendAsync(newMessage);
            // clear input box
            newMessage = "";
        }
    }

    private async Task userName_KeyDown(KeyboardEventArgs ea)
    {
        if (ea.Key == "Enter")
            await LoginAsGuest();
    }

    class Message
    {
        public Message(string username, string body, DateTimeOffset dateTime, bool mine)
        {
            Username = username;
            Body = body;
            DateTime = dateTime;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public DateTimeOffset DateTime { get; set; }
        public bool Mine { get; set; }

        /// <summary>
        /// Determine CSS classes to use for message div
        /// </summary>
        public string CSS
        {
            get
            {
                return Mine ? "sent" : "received";
            }
        }
    }


}
